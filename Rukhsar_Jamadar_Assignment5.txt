
********************class file for LinkedList************************

Q.1  Explain the different ways of constructing an LinkedList?
ans:
Linkedlist using Iterator:
package jintership;
import java.util.*;

public class MyLinkedList {

	public static void main(String[] args) {
		  LinkedList<String>l1=new LinkedList<String>();
		   l1.add("Tomato");
		   l1.add("Potato");
		   l1.add("Garlic");
		   Iterator<String>itr=l1.iterator();//traversing list through Iterator
		   while(itr.hasNext())
		   {
		   System.out.println(itr.next());
			}

	}

}
output:
Tomato
Potato
Garlic

Linkedlist using for loop
package jintership;
import java.util.*;

public class MyLinkedList {

	public static void main(String[] args) {
		  LinkedList<String>l1=new LinkedList<String>();
		   l1.add("Tomato");
		   l1.add("Potato");
		   l1.add("Garlic");
		  
		   for(String veg:l1)
		   {
			   System.out.println(veg);
		   }

	}

}
output:
Tomato
Potato
Garlic

2)  How do you find the number of elements present in an LinkedList?

Using size() method. size() method returns number of elements present in an  LinkedList?
package jintership;
import java.util.*;

public class MyLinkedList {

	public static void main(String[] args) {
		  LinkedList<String>l1=new LinkedList<String>();
		   l1.add("Tomato");
		   l1.add("Potato");
		   l1.add("Garlic");
		   System.out.println("Length of the list:"+l1.size());//Return the number of element present in list
		   for(String veg:l1)
		   {
			   System.out.println(veg);
		   }

	}

}
output:
Length of the list:3
Tomato
Potato
Garlic

3) How do you find out whether the given LinkedList is empty or not?
package jintership;
import java.util.*;

public class MyLinkedList {

	public static void main(String[] args) {
		  LinkedList<String>l1=new LinkedList<String>();
		   l1.add("Tomato");
		   l1.add("Potato");
		   l1.add("Garlic");
		   System.out.println(l1.isEmpty());//Return true if list empty
		   System.out.println("Length of the list:"+l1.size());//Return the number of element present in list
		   for(String veg:l1)
		   {
			   System.out.println(veg);
		   }

	}

}
output:
false
Length of the list:3
Tomato
Potato
Garlic

4) How do you check whether the given element is present in an LinkedList or not?

package jintership;
import java.util.*;

public class MyLinkedList {

	public static void main(String[] args) {
		  LinkedList<Integer>l1=new LinkedList<Integer>();
		   l1.add(1);
		   l1.add(2);
		   l1.add(3);
		   System.out.println(l1.isEmpty());//Return true if list empty
		   System.out.println("Length of the list:"+l1.size());//Return the number of element present in list
		   System.out.println(l1.contains(3));//Return true if list contain that element
		   for(Integer veg:l1)
		   {
			   System.out.println(veg);
		   }

	}

}
output:
false
Length of the list:3
true
1
2
3

5) How do you get the position of a particular element in an LinkedList?
package jintership;
import java.util.*;

public class MyLinkedList {

	public static void main(String[] args) {
		  LinkedList<Integer>l1=new LinkedList<Integer>();
		   l1.add(1);
		   l1.add(2);
		   l1.add(3);
		   System.out.println(l1.isEmpty());//Return true if list empty
		   System.out.println("Length of the list:"+l1.size());//Return the number of element present in list
		   System.out.println(l1.contains(3));//Return true if list contain that element
		   System.out.println("The position of 2 in list is:"+l1.indexOf(2));//it gives the position of element in list
	       System.out.println("The position of 5 in list is:"+l1.indexOf(5));
	       System.out.println("The position of 2 in list is:"+l1.lastIndexOf(2));//it last_occurance position of 2
		   
		   
		   for(Integer veg:l1)
		   {
			   System.out.println(veg);
		   }

	}

}
output:
false
Length of the list:3
true
The position of 2 in list is:1
The position of 5 in list is:-1
The position of 2 in list is:1
1
2
3
6) How do you convert an LinkedList to Array?
package jintership;
import java.util.*;

public class MyLinkedList {

	public static void main(String[] args) {
		  LinkedList<Integer>l1=new LinkedList<Integer>();
		   l1.add(1);
		   l1.add(2);
		   l1.add(3);
		   
		   System.out.println("Length of the list:"+l1.size());//Return the number of element present in list
		   System.out.println("Element of LinkedList:");
		   for(Integer veg:l1)
		   {
			   System.out.println(veg);
		   }
		   Integer a[] = new Integer[l1.size()];
	       a=l1.toArray(a);
	       System.out.println("Element of Array:");
	       for(Integer x:a)
	       {
	    	   System.out.println(+x);
	       }
		

	}

}
output:
Length of the list:3
Element of LinkedList:
1
2
3
Element of Array:
1
2
3
7)How do you retrieve an element from a particular position of an LinkedList?
package jintership;
import java.util.*;

public class MyLinkedList {

	public static void main(String[] args) {
		  LinkedList<Integer>l1=new LinkedList<Integer>();
		   l1.add(1);
		   l1.add(2);
		   l1.add(3);
		   
		   System.out.println("Length of the list:"+l1.size());//Return the number of element present in list
		   System.out.println("Element of LinkedList:");
		   for(int i=0;i<l1.size();i++)
		      {
		    	  System.out.println(l1.get(i));
		      }
		  
		

	}

}
output:
Length of the list:3
Element of LinkedList:
1
2
3
8) How do you replace a particular element in an LinkedList with the given element?
package jintership;
import java.util.*;

public class MyLinkedList {

	public static void main(String[] args) {
		  LinkedList<Integer>l1=new LinkedList<Integer>();
		   l1.add(1);
		   l1.add(2);
		   l1.add(3);
		   l1.add(4);
		   
		   System.out.println("Length of the list:"+l1.size());//Return the number of element present in list
		   l1.set(2, 7);
		   System.out.println("Element of LinkedList:");
		   for(int i=0;i<l1.size();i++)
		      {
		    	  System.out.println(l1.get(i));
		      }
		  
		

	}

}

output:
Length of the list:4
Element of LinkedList:
1
2
7
4

9) How do you append an element at the end of an LinkedList?

package jintership;
import java.util.*;

public class MyLinkedList {

	public static void main(String[] args) {
		  LinkedList<Integer>l1=new LinkedList<Integer>();
		   l1.add(1);
		   l1.add(2);
		   l1.add(3);
		   l1.add(4);
		   
		   System.out.println("Length of the list:"+l1.size());//Return the number of element present in list
		   
		   System.out.println("Element of LinkedList:"+l1);
		 
	       l1.add(5);
	       System.out.println("Element of LinkedList after adding new one element:"+l1);
		   
		  
		

	}

}

output:
Length of the list:4
Element of LinkedList:[1, 2, 3, 4]
Element of LinkedList after adding new one element:[1, 2, 3, 4, 5]

10)How do you insert an element at a particular position of an LinkedList?
package jintership;
import java.util.*;

public class MyLinkedList {

	public static void main(String[] args) {
		  LinkedList<Integer>l1=new LinkedList<Integer>();
		   l1.add(1);
		   l1.add(2);
		   l1.add(3);
		   l1.add(4);
		   
		   System.out.println("Length of the list:"+l1.size());//Return the number of element present in list
		   
		   System.out.println("Element of LinkedList:"+l1);
		   l1.add(2,5);
	       System.out.println("list after appending new element:"+l1);

		 
	       
		   
		  
		

	}

}

output:
Length of the list:4
Element of LinkedList:[1, 2, 3, 4]
list after appending new element:[1, 2, 5, 3, 4]

11)
package jintership;
import java.util.*;

public class MyLinkedList {

	public static void main(String[] args) {
		  LinkedList<Integer>l1=new LinkedList<Integer>();
		   l1.add(1);
		   l1.add(2);
		   l1.add(3);
		   l1.add(4);
		   
		   System.out.println("Length of the list:"+l1.size());//Return the number of element present in list
		   
		   System.out.println("Element of LinkedList:"+l1);
		   l1.add(2,5);
	       System.out.println("list after appending new element:"+l1);

	       l1.remove(new Integer(4));//remove method by value
	       System.out.println("list after removing the element:"+l1);
	       System.out.println("sublist is:"+l1.subList(1,3));

	       LinkedList<Integer>l3=new LinkedList<Integer>();
	       l3.add(6);
	       l3.add(7);
	       l3.add(8);
	       System.out.println("list2:"+l3);
	       l1.addAll(l3);
	       System.out.println("New list"+l1);
	      
	       
	       l1.clear();//remove all the element from list
	       System.out.println("list after removing all element:"+l1);
}
}
output:
Length of the list:4
Element of LinkedList:[1, 2, 3, 4]
list after appending new element:[1, 2, 5, 3, 4]
list after removing the element:[1, 2, 5, 3]
sublist is:[2, 5]
list2:[6, 7, 8]
New list[1, 2, 5, 3, 6, 7, 8]
list after removing all element:[]


**************class file containg all method of Hashset***************
package jintership;
import java.util.*;

public class MyHashSet {

	public static void main(String[] args) {
		 HashSet<Integer>l2=new HashSet<Integer>(20);
	       l2.add(1);
	       l2.add(2);
	       l2.add(3);
	       l2.add(2);
	       l2.add(4);
	       
	       
	       System.out.println("Length of the list:"+l2.size());//Return the number of element present in list
	       System.out.println(l2.isEmpty());//Return true if list empty
	       System.out.println(l2.contains(3));//Return true if list contain that element
	       Integer a[] = new Integer[l2.size()];
	       a=l2.toArray(a);//convert ArrayList to array 
	       System.out.println("Element of Array:");
	       for(Integer x:a)
	       {
	    	   System.out.println(+x);
	       }
	      
	       
	       l2.remove(2);//remove method by index
	       System.out.println("list after removing the element:"+l2);
	       
	       l2.remove(new Integer(4));//remove method by value
	       System.out.println("list after removing the element:"+l2);

	     	       System.out.println("list:"+l2);
	     
	       ArrayList<Integer>l3=new ArrayList<Integer>(10);
	       l3.add(6);
	       l3.add(7);
	       l3.add(8);
	       System.out.println("list2:"+l3);
	       l2.addAll(l3);
	       System.out.println("New list"+l2);
	      
	       
	       l2.clear();//remove all the element from list
	       System.out.println("list after removing all element:"+l2);
	       
	       

	}

}
output:
Length of the list:4
false
true
Element of Array:
1
2
3
4
list after removing the element:[1, 3, 4]
list after removing the element:[1, 3]
list:[1, 3]
list2:[6, 7, 8]
New list[1, 3, 6, 7, 8]
list after removing all element:[]


*******************class file for HashMap***********************
package jintership;
import java.util.*;

public class MyHashMap {

	public static void main(String[] args) {
		HashMap<Integer,Integer>l2=new HashMap<Integer,Integer>();
	       l2.put(1,1);
	       l2.put(2,2);
	       l2.put(3,3);
	       l2.put(4,4);
	       System.out.println("Elements of the hashmap:"+l2);
	      
	       System.out.println("Length of the list:"+l2.size());//Return the number of element present in list
	       System.out.println(l2.isEmpty());//Return true if list empty
	       System.out.println(l2.get(3));
	       
	      
	      
	       l2.remove(2);//remove method by index
	      
	       System.out.println("list after removing the element:"+l2);
	       l2.remove(new Integer(4));//remove method by value
	       System.out.println("list after removing the element:"+l2);

	      
	       HashMap<Integer,Integer>l3=new HashMap<Integer,Integer>(10);
	       l3.put(6,6);
	       l3.put(7,7);
	       l3.put(8,8);
	       System.out.println("list2:"+l3);
	       l2.putAll(l3);
	       System.out.println("New list"+l2);
	      
	       
	       l2.clear();//remove all the element from list
	       System.out.println("list after removing all element:"+l2);
	       

	}

}
output:
Elements of the hashmap:{1=1, 2=2, 3=3, 4=4}
Length of the list:4
false
3
list after removing the element:{1=1, 3=3, 4=4}
list after removing the element:{1=1, 3=3}
list2:{6=6, 7=7, 8=8}
New list{1=1, 3=3, 6=6, 7=7, 8=8}
list after removing all element:{}

	       
		   
		  



